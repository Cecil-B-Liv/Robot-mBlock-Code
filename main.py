# generated by mBlock5 for CyberPi
# codes make you happy

import event, time, cyberpi, mbot2, mbuild, random

# --- Network + TTS setup ---
cyberpi.driver.cloud_translate.TTS_URL = "{TTSURL}"
cyberpi.driver.cloud_translate.set_token("{ACCESSTOKEN}")

# --- self-introduction function (runs once at startup) ---
def self_intro():
    cyberpi.audio.set_vol(80)
    cyberpi.audio.set_tempo(150)
    cyberpi.audio.play_until('start')
    cyberpi.console.clear()
    cyberpi.console.set_font(12)

    cyberpi.wifi.connect("Maker-guest", "makeblock")
    cyberpi.console.println("Connecting the network...")
    while not cyberpi.wifi.is_connect():
        pass
    cyberpi.console.println("Connected network successfully!")
    time.sleep(0.5)

    lines = [
        "Hi, I'm mBot2—today I’ll show you how I navigate like a smart robot.",
        "I can follow colored paths, stop at red, go on green, and slow down at yellow.",
        "If there's an obstacle, I pause, think, and find another way.",
        "All this is powered by Python, sensors, and a bit of logic.",
        "Ready to see me in action? Press B to start!"
    ]

    for l in lines:
        cyberpi.console.println(l)
        cyberpi.cloud.tts("en", l)
        time.sleep(0.2)

# --- Variables ---
base_power = 35
current_speed = base_power
kp = 0
left_power = 0
right_power = 0
red_count = 0

@event.start
def on_start():
    global current_speed, base_power, kp, left_power, right_power, red_count
    self_intro()  # ← Inserted here
    cyberpi.console.set_font(12)
    cyberpi.console.println("A：Stop Navigating")
    cyberpi.console.println("B：Start Navigating")
    cyberpi.console.println("Press joystick：")
    cyberpi.console.println("Check the color recognition results")

@event.is_press('a')
def is_a_press():
    global base_power, kp, left_power, right_power
    cyberpi.stop_other()
    mbot2.drive_power(0, 0)

@event.is_press("b")
def is_b_press():
    global current_speed, base_power, kp, left_power, right_power, red_count
    cyberpi.stop_other()
    base_power = 30
    kp = base_power / 100

    while True:
        # Obstacle detection
        if mbuild.ultrasonic2.get(1) < 15:
            mbot2.EM_stop("all")
            cyberpi.console.println("Obstacle detected!")
            start_time = time.time()

            while True:
                if mbuild.ultrasonic2.get(1) > 15:
                    break
                if time.time() - start_time > 10:
                    mbot2.turn(190, 50)
                    break

        if mbuild.quad_rgb_sensor.is_color("black", "L2"):
            offset = mbuild.quad_rgb_sensor.get_offset_track(1)
            right_power = (base_power - kp * offset)
            left_power = -1 * (base_power + kp * offset) * 0.7
            mbot2.drive_power(right_power, left_power)

        if mbuild.quad_rgb_sensor.is_color("black", "R2"):
            offset = mbuild.quad_rgb_sensor.get_offset_track(1)
            right_power = (base_power - kp * offset) * 0.7
            left_power = -1 * (base_power + kp * offset)
            mbot2.drive_power(right_power, left_power)

        # Color detection - RED
        if mbuild.quad_rgb_sensor.is_color("red", "any"):
            mbot2.EM_stop("all")
            mbot2.backward(50, 0.5)
            cyberpi.led.show("red red red red red")
            cyberpi.console.println("Red detected - stopping")
            cyberpi.console.println("Waiting for green...")
            start_time = time.time()

            while True:
                if time.time() - start_time > 10:
                    mbot2.turn(180, 50)
                    break
                if mbuild.quad_rgb_sensor.is_color("green", "any"):
                    cyberpi.console.println("Green detected - moving forward")
                    cyberpi.led.show("green green green green green")
                    mbot2.forward(40, 1.0)
                    break
                time.sleep(0.1)

        # Color detection - YELLOW
        if mbuild.quad_rgb_sensor.is_color("yellow", "any"):
            mbot2.forward(40, 1.5)
            cyberpi.led.show("yellow yellow yellow yellow yellow")
            cyberpi.console.println("Yellow detected - slowing down")

            start_time = time.time()
            base_power = 25

            while time.time() - start_time < 5:
                offset = mbuild.quad_rgb_sensor.get_offset_track(1)
                right_power = base_power - kp * offset
                left_power = -1 * (base_power + kp * offset)
                mbot2.drive_power(right_power, left_power)
                time.sleep(0.05)

            base_power = 30

        # Color detection - WHITE
        if mbuild.quad_rgb_sensor.is_color("white", "any"):
            cyberpi.led.show("white white white white white")
            base_power = 30
            offset = mbuild.quad_rgb_sensor.get_offset_track(1)
            right_power = base_power - kp * offset
            left_power = -1 * (base_power + kp * offset)
            mbot2.drive_power(right_power, left_power)

        time.sleep(0.05)

    mbot2.EM_stop("all")
    cyberpi.console.println("Navigation stopped")

@event.is_press("middle")
def is_joy_press():
    cyberpi.stop_other()
    mbot2.drive_power(0, 0)

    while not cyberpi.controller.is_press("a"):
        colors = [
            "L1: " + str(mbuild.quad_rgb_sensor.get_color_sta("L1", 1)),
            "R1: " + str(mbuild.quad_rgb_sensor.get_color_sta("R1", 1)),
        ]
        cyberpi.console.clear()
        for color in colors:
            cyberpi.console.println(color)
